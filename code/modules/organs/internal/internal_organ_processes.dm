#define BRUISED_2_EFFICIENCY 80
#define BROKEN_2_EFFICIENCY 50
#define DEAD_2_EFFICIENCY 0

//Has processes for all internal organs, called from /mob/living/carbon/human/Life()

/mob/living/carbon/human/proc/process_internal_organs() //Calls all of the internal organ processes
	if(should_have_process(OP_EYES))	//Bad way to do this, should be reworked to call procs from a list that's generated by the species.has_process list + extra processes gotten from organs (carrion)
		eye_process()
	if(should_have_process(OP_KIDNEY_LEFT) || should_have_process(OP_KIDNEY_RIGHT))
		kidney_process()
	if(should_have_process(OP_LIVER))
		liver_process()
	if(should_have_process(OP_HEART))
		heart_process()
	if(should_have_process(OP_LUNGS))
		lung_process()
	if(should_have_process(OP_STOMACH))
		stomach_process()
	if(should_have_process(BP_BRAIN))  // Add brain processing
		brain_process()
	if(is_carrion(src))
		carrion_process()

/mob/living/carbon/human/proc/get_organ_efficiency(process_define)
	var/list/process_list = internal_organs_by_efficiency[process_define]
	var/effective_efficiency = 0
	if(process_list && process_list.len)
		for(var/organ in process_list)
			var/obj/item/organ/internal/I = organ
			effective_efficiency += I.get_process_efficiency(process_define)

	return effective_efficiency ? effective_efficiency : 1

/mob/living/carbon/human/get_specific_organ_efficiency(process_define, parent_organ_tag)
	var/effective_efficiency = 0
	var/obj/item/organ/external/parent_organ
	if(isorgan(parent_organ_tag))
		parent_organ = parent_organ_tag
	else
		parent_organ = get_organ(parent_organ_tag)
	if(parent_organ)
		for(var/organ in parent_organ.internal_organs)
			var/obj/item/organ/internal/I = organ
			if(process_define in I.organ_efficiency)
				effective_efficiency += I.get_process_efficiency(process_define)

	return effective_efficiency ? effective_efficiency : 1

/mob/living/carbon/human/proc/eye_process()
	var/eye_efficiency = get_organ_efficiency(OP_EYES) * (1 + chem_effects[CE_EYEHEAL]) //Highest this goes is 2

	if(eye_efficiency < BRUISED_2_EFFICIENCY)
		eye_blurry = 1
	if(eye_efficiency < BROKEN_2_EFFICIENCY)
		eye_blind = 1
	//update_client_colour()

/mob/living/carbon/human/proc/kidney_process()
	var/base_kidneys_efficiency = get_organ_efficiency(OP_KIDNEYS)
	var/toxin_penalty = min(chem_effects[CE_TOXIN] * 3, 40) // Kidneys are more sensitive to toxins than liver
	var/kidneys_efficiency = max(0, base_kidneys_efficiency - toxin_penalty) * (1 + chem_effects[CE_PURGER])
	var/obj/item/organ/internal/kidney = random_organ_by_process(OP_KIDNEYS)
	var/chem_toxicity = chem_effects[CE_BLOODCLOT] + chem_effects[CE_SPEEDBOOST]
	var/toxin_strength = chem_effects[CE_TOXIN] * IORGAN_KIDNEY_TOX_RATIO + chem_toxicity

	// Toxin damage calculation - full strength regardless of efficiency
	var/toxin_damage = kidney ? max(0, (toxin_strength / (stats.getPerk(PERK_BLOOD_OF_LEAD) ? 2 : 1))) : 0

	// Check if both kidneys are dead
	var/dead_kidneys = 0
	var/total_kidneys = 0
	for(var/obj/item/organ/internal/kidney/K in internal_organs)
		total_kidneys++
		if(K.status & ORGAN_DEAD)
			dead_kidneys++

	// Kidney failure effects
	if(dead_kidneys >= 2 || (dead_kidneys >= 1 && total_kidneys == 1)) // Both kidneys dead or only kidney dead
		// Complete kidney failure - severe toxin buildup
		add_chemical_effect(CE_TOXIN, 1.5)
		if(prob(3))
			to_chat(src, SPAN_DANGER("You feel extremely ill as waste products accumulate in your blood..."))
	else if(kidneys_efficiency < DEAD_2_EFFICIENCY) // Severely damaged kidneys
		// Failing kidneys generate some toxin buildup
		if(prob(10))
			add_chemical_effect(CE_TOXIN, 0.3)

	// Enhanced toxin damage for kidneys
	if(toxin_strength > 8 && kidney) // Lower threshold than liver since kidneys are more sensitive
		var/extra_damage = (toxin_strength - 8) * 0.15
		toxin_damage += extra_damage
		if(toxin_strength > 15 && prob(3))
			to_chat(src, SPAN_WARNING("Your back aches as toxins strain your kidneys..."))

	// Organ functions
	// Blood regeneration if there is some space
	regenerate_blood(0.2 + 2 * chem_effects[CE_BLOODRESTORE] * (kidneys_efficiency / 100))

	// Bad stuff
	if(kidneys_efficiency < BROKEN_2_EFFICIENCY)
		if(toxin_strength > 0)
			apply_damage(toxin_strength, TOX)	// If your kidneys aren't working, your body will start to take damage

		// Secondary organ failure when kidneys fail
		if(kidneys_efficiency < DEAD_2_EFFICIENCY && prob(2))
			var/list/other_organs = list()
			for(var/obj/item/organ/internal/I in internal_organs)
				if(I != kidney && !BP_IS_ROBOTIC(I) && !(I.status & ORGAN_DEAD))
					other_organs += I
			if(other_organs.len)
				var/obj/item/organ/internal/target = pick(other_organs)
				target.take_damage(0.3, TOX) // Less damage than liver failure
				if(prob(8))
					to_chat(src, SPAN_WARNING("Your [target.name] struggles as kidney failure affects your entire system..."))

	if(toxin_damage > 0 && kidney)
		kidney.take_damage(toxin_damage, TOX)

/mob/living/carbon/human/proc/liver_process()
	var/liver_efficiency = get_organ_efficiency(OP_LIVER) * (1 + chem_effects[CE_ANTITOX])
	var/obj/item/organ/internal/liver = random_organ_by_process(OP_LIVER)
	var/alcohol_strength = chem_effects[CE_ALCOHOL]
	var/toxin_strength = chem_effects[CE_TOXIN] * IORGAN_LIVER_TOX_RATIO + chem_effects[CE_ALCOHOL_TOXIC]

	// Existing damage is subtracted to prevent weaker toxins from maxing out tox wounds on the organ
	var/toxin_damage = liver ? (toxin_strength / (stats.getPerk(PERK_BLOOD_OF_LEAD) ? 2 : 1)) - (liver_efficiency / 100) - liver.damage * 2 : 0

	// Check if liver is dead first - dead livers don't filter anything
	if(!liver || (liver.status & ORGAN_DEAD))
		// Dead liver can't process toxins and generates waste products
		if(liver)
			add_chemical_effect(CE_TOXIN, 3) // Increased base toxin buildup from liver failure
			if(prob(8)) // Increased chance for more severe toxin buildup
				add_chemical_effect(CE_TOXIN, 2) // Increased additional toxin buildup
			if(prob(20))
				to_chat(src, SPAN_WARNING("You feel nauseous as waste builds up in your system..."))

			// Dead liver + existing toxins = systemic organ damage
			if(toxin_strength > 5) // If there are significant toxins and no liver to process them
				var/list/vulnerable_organs = list()
				for(var/obj/item/organ/internal/I in internal_organs)
					if(I != liver && !BP_IS_ROBOTIC(I) && !(I.status & ORGAN_DEAD))
						vulnerable_organs += I

				if(vulnerable_organs.len)
					// Damage multiple organs when liver is dead and toxins are high
					var/organs_to_damage = min(vulnerable_organs.len, max(1, round(toxin_strength / 8)))
					for(var/i = 1 to organs_to_damage)
						var/obj/item/organ/internal/target = pick_n_take(vulnerable_organs)
						var/damage_amount = (toxin_strength / 10) * rand(0.8, 1.2) // Variable damage based on toxin level
						target.take_damage(damage_amount, TOX)

						if(prob(15))
							to_chat(src, SPAN_DANGER("Your [target.name] is being poisoned by unfiltered toxins!"))

					if(toxin_strength > 15 && prob(5))
						to_chat(src, SPAN_DANGER("Without a functioning liver, toxins are destroying your organs!"))

		// Dead liver doesn't filter toxins or process nutrients
		// Blood loss makes you lose nutriments faster without a liver
		var/blood_volume = get_blood_volume()
		if(blood_volume * effective_blood_volume < total_blood_req + BLOOD_VOLUME_SAFE_MODIFIER)
			if(nutrition >= 300)
				adjustNutrition(-15) // Faster nutrition loss without liver
			else if(nutrition >= 200)
				adjustNutrition(-5)
		return // Exit early - dead liver does nothing else

	// Living liver processing starts here
	var/base_liver_efficiency = get_organ_efficiency(OP_LIVER)
	var/toxin_penalty = min(chem_effects[CE_TOXIN] * 2, 30) // Toxins reduce efficiency by up to 30%

	// Additional strain from actively filtering toxins - liver works harder when processing more toxins
	var/toxin_filtering_strain = 0
	if(toxin_strength > 2) // Only apply strain when there's significant toxin load
		toxin_filtering_strain = min((toxin_strength - 2) * 3, 25) // Up to 25% efficiency loss from strain
		if(toxin_filtering_strain > 15 && prob(2))
			to_chat(src, SPAN_WARNING("Your liver feels overworked from filtering toxins..."))

	// Calculate effective liver efficiency with all penalties
	liver_efficiency = max(0, base_liver_efficiency - toxin_penalty - toxin_filtering_strain) * (1 + chem_effects[CE_ANTITOX])

	// Apply efficiency loss directly to the liver organ
	if(liver && (toxin_penalty > 0 || toxin_filtering_strain > 0))
		var/efficiency_loss_percentage = (toxin_penalty + toxin_filtering_strain)
		// Directly modify the liver's organ efficiency - this affects the organ permanently until reset
		liver.organ_efficiency[OP_LIVER] = max(0, liver.initial_organ_efficiency[OP_LIVER] - efficiency_loss_percentage)

	// Severely damaged but not dead liver still generates some toxins
	if(liver_efficiency < DEAD_2_EFFICIENCY)
		if(prob(20)) // Increased chance
			add_chemical_effect(CE_TOXIN, 1.0) // Increased toxin generation

	// Enhanced toxin damage system - only for living livers
	if(toxin_strength > 10) // High toxin levels damage liver over time
		var/extra_damage = (toxin_strength - 10) * 0.1
		toxin_damage += extra_damage
		if(toxin_strength > 20 && prob(2))
			to_chat(src, SPAN_WARNING("Your abdomen aches as toxins strain your liver..."))

	// Toxin efficiency penalty feedback
	var/total_efficiency_loss = toxin_penalty + toxin_filtering_strain
	if(total_efficiency_loss > 20 && prob(3))
		if(toxin_filtering_strain > 15)
			to_chat(src, SPAN_DANGER("Your liver is severely strained from filtering heavy toxin loads!"))
		else if(toxin_penalty > 25)
			to_chat(src, SPAN_DANGER("Your liver feels severely poisoned and sluggish!"))
		else
			to_chat(src, SPAN_WARNING("You feel toxins interfering with your liver function..."))

	// Bad stuff
	// If you're not filtering well, you're in trouble. Ammonia buildup to toxic levels and damage from alcohol
	if(liver_efficiency < BROKEN_2_EFFICIENCY)
		if(alcohol_strength)
			toxin_damage += 0.5 * max(2 - (liver_efficiency * 0.01), 0) * alcohol_strength
		if(toxin_strength > 0)
			apply_damage(toxin_strength, TOX)	// If your liver isn't working, your body will start to take damage

		// Systematic organ failure begins when liver is severely damaged
		if(liver_efficiency < DEAD_2_EFFICIENCY && prob(3))
			var/list/other_organs = list()
			for(var/obj/item/organ/internal/I in internal_organs)
				if(I != liver && !BP_IS_ROBOTIC(I) && !(I.status & ORGAN_DEAD))
					other_organs += I
			if(other_organs.len)
				var/obj/item/organ/internal/target = pick(other_organs)
				target.take_damage(0.5, TOX)
				if(prob(10))
					to_chat(src, SPAN_WARNING("Your [target.name] feels strained from the systemic toxin buildup..."))

	if(toxin_damage > 0)
		liver.take_damage(toxin_damage, TOX)

	// Blood loss or liver damage make you lose nutriments
	var/blood_volume = get_blood_volume()
	if(blood_volume * effective_blood_volume < total_blood_req + BLOOD_VOLUME_SAFE_MODIFIER || (liver_efficiency < BRUISED_2_EFFICIENCY))
		if(nutrition >= 300)
			adjustNutrition(-10)
		else if(nutrition >= 200)
			adjustNutrition(-2)


/mob/living/carbon/human/proc/heart_process()
	handle_pulse()
	handle_heart_blood()

/mob/living/carbon/human/proc/handle_pulse()
	// Pulse is now handled by individual heart organs in heart.dm
	// This legacy system is disabled to prevent conflicts with the advanced heart system

	// Only handle robotic heart checks and death states
	var/roboheartcheck = TRUE //Check if all hearts are robotic
	for(var/obj/item/organ/internal/vital/heart in organ_list_by_process(OP_HEART))
		if(!BP_IS_ROBOTIC(heart))
			roboheartcheck = FALSE
			break

	if(stat == DEAD || roboheartcheck)
		pulse = PULSE_NONE	//that's it, you're dead (or your metal heart is), nothing can influence your pulse
		return

	// Handle special conditions that override heart pulse
	if(status_flags & FAKEDEATH || chem_effects[CE_NOPULSE])
		pulse = PULSE_NONE		//pretend that we're dead. unlike actual death, can be influenced by meds
		return

	// Otherwise, let the heart organ handle pulse calculation and sync
	// Heart organs will set owner.pulse = pulse automatically

/mob/living/carbon/human/proc/handle_heart_blood()
	var/base_heart_efficiency = get_organ_efficiency(OP_HEART)
	var/toxin_penalty = min(chem_effects[CE_TOXIN] * 2.5, 35) // Toxins affect heart performance
	var/heart_efficiency = max(0, base_heart_efficiency - toxin_penalty)
	var/blood_oxygenation = 0.4 * chem_effects[CE_OXYGENATED]
	var/blood_volume = get_blood_volume() // Percentage.

	// Damaged heart virtually reduces the blood volume, as the blood isn't being pumped properly anymore.
	if(heart_efficiency <= 100)	//flat scaling up to 100
		effective_blood_volume = (heart_efficiency / 100) + blood_oxygenation
	else	//half scaling at over 100
		effective_blood_volume = 1 + ((heart_efficiency - 100) / 200) + blood_oxygenation
	blood_volume *= effective_blood_volume

	//Effects of bloodloss
	var/blood_safe = total_blood_req + BLOOD_VOLUME_SAFE_MODIFIER

	if(blood_volume < total_blood_req)
		status_flags |= BLEEDOUT
		if(prob(15))
			to_chat(src, SPAN_WARNING("Your organs feel extremely heavy"))
	else
		status_flags &= ~BLEEDOUT

	// Blood loss or heart damage make you lose nutriments
	if(blood_volume < blood_safe || heart_efficiency < BRUISED_2_EFFICIENCY)
		if(nutrition >= 300)
			adjustNutrition(-10)
		else if(nutrition >= 200)
			adjustNutrition(-2)


/mob/living/carbon/human/proc/brain_process()
	// Handle brain hypoxia damage from heart failure
	// Only process if we have an organic brain
	if(!should_have_process(BP_BRAIN))
		return

	var/obj/item/organ/internal/vital/brain/brain_organ = random_organ_by_process(BP_BRAIN)
	if(!brain_organ || BP_IS_ROBOTIC(brain_organ))
		return

	// Apply brain damage from hypoxia when heart stops OR oxygen loss is below 100
	if(pulse == PULSE_NONE || getOxyLoss() >= 100)
		// Calculate brain damage based on oxygen loss percentage
		var/oxygen_loss = getOxyLoss()
		var/damage_amount = 2 // Base damage when heart stops (increased from 1)

		if(oxygen_loss >= 100)
			// Scale damage based on oxygen loss: 100 oxyloss = 10 damage, 150 oxyloss = 15 damage, 200 oxyloss = 20 damage, etc.
			damage_amount = (oxygen_loss / 100) * 10

		// Directly add to brainloss variable instead of using organ damage
		brainloss = min(brainloss + damage_amount, 200) // Cap at 200 (max brain damage)
		if(prob(50))
			to_chat(src, SPAN_DANGER("Your brain is starved of oxygen!"))


/mob/living/carbon/human/proc/lung_process()
	var/base_lung_efficiency = get_organ_efficiency(OP_LUNGS)
	var/toxin_penalty = min(chem_effects[CE_TOXIN] * 2.5, 35) // Toxins affect lung performance
	var/lung_efficiency = max(0, base_lung_efficiency - toxin_penalty)
	var/internal_oxygen = 100 - oxyloss

	internal_oxygen *= lung_efficiency / 100

	if(internal_oxygen < total_oxygen_req)
		if(prob(1))
			Weaken(1.5 SECONDS)
			visible_message(SPAN_WARNING("[src] falls to the ground and starts hyperventilating!."), SPAN_DANGER("AIR! I NEED MORE AIR!"))
			var/i
			for(i = 1; i <= 5; i++)	//gasps 5 times
				spawn(i)
					emote("gasp")

		if(prob(2))
			spawn emote("me", 1, "coughs up blood!")
			drip_blood(10)

		if(prob(4))
			spawn emote("me", 1, "gasps for air!")
			losebreath += 15

		if(prob(15))
			var/heavy_spot = pick("chest", "skin", "brain")
			to_chat(src, SPAN_WARNING("Your [heavy_spot] feels too heavy for your body"))

/mob/living/carbon/human/proc/stomach_process()
	var/stomach_efficiency = get_organ_efficiency(OP_STOMACH)
	//max_nutrition = MOB_BASE_MAX_HUNGER * (stomach_efficiency / 100) - This messes with genetics, and a few perks/affects.
	//If we have for some reason negitive max_nutrition, set to 0 as not to ruin maths in human_movement.dm
	if(-1 >= max_nutrition)
		max_nutrition = 0

	if(nutrition > 0 && stat != 2)
		if(stomach_efficiency <= 0)
			nutrition = 0
		else
			adjustNutrition(-(total_nutriment_req * (stomach_efficiency/100)))

/* We dont have vore
	if(stomach_efficiency <= 1)
		for(var/mob/living/M in stomach_contents)
			M.loc = loc
			stomach_contents.Remove(M)
			continue
		ingested.trans_to_turf(get_turf(src))
*/

/mob/living/carbon/human/var/carrion_stored_chemicals = 0
/mob/living/carbon/human/var/carrion_hunger = 0
/mob/living/carbon/human/var/carrion_last_hunger = -2 MINUTES
/mob/living/carbon/human/proc/carrion_process()
	var/vessel_efficiency = get_organ_efficiency(OP_CHEMICALS)
	var/maw_efficiency = get_organ_efficiency(OP_MAW)
	if(vessel_efficiency)
		carrion_stored_chemicals = min(carrion_stored_chemicals + (0.01 * vessel_efficiency), 0.5 * vessel_efficiency)

	if((maw_efficiency > 1 )&& (world.time > (carrion_last_hunger + 2 MINUTES)))
		var/max_hunger = round(10 * (maw_efficiency / 100))
		if(carrion_hunger < max_hunger)
			carrion_hunger = min(carrion_hunger + (round(1* (maw_efficiency / 100))), max_hunger)
		else
			to_chat(src, SPAN_WARNING("Your hunger is restless!"))
		carrion_last_hunger = world.time

#undef BRUISED_2_EFFICIENCY
#undef BROKEN_2_EFFICIENCY
#undef DEAD_2_EFFICIENCY
