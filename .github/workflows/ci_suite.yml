name: CI Suite
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  run_linters:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    name: Run Linters Diagnostic Tool
    runs-on: ubuntu-22.04
    concurrency:
      group: run_linters-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Restore SpacemanDMM cache
        uses: actions/cache@v4
        with:
          path: ~/SpacemanDMM
          key: ${{ runner.os }}-spacemandmm-${{ secrets.CACHE_PURGE_KEY }}
      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: tgui/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ secrets.CACHE_PURGE_KEY }}-${{ hashFiles('tgui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ secrets.CACHE_PURGE_KEY }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Tools
        run: |
          pip3 install setuptools
          bash tools/ci/install_node.sh
          bash tools/ci/install_spaceman_dmm.sh dreamchecker
          tools/bootstrap/python -c ''
      - name: Run Linters
        run: |
          bash tools/ci/check_filedirs.sh sojourn-iskhod.dme
          bash tools/ci/check_changelogs.sh
          bash tools/ci/check_grep.sh
          bash tools/ci/check_misc.sh
          tools/bootstrap/python tools/ticked_file_enforcement/ticked_file_enforcement.py < tools/ticked_file_enforcement/schemas/sojourn_dme.json
          tools/bootstrap/python tools/ticked_file_enforcement/ticked_file_enforcement.py < tools/ticked_file_enforcement/schemas/unit_tests.json
          tools/build/build --ci lint tgui-test
          tools/bootstrap/python -m dmi.test
          tools/bootstrap/python -m mapmerge2.dmm_test
          ~/dreamchecker > ${GITHUB_WORKSPACE}/output-annotations.txt 2>&1
      - name: Annotate Lints
        uses: yogstation13/DreamAnnotate@v2
        if: always()
        with:
          outputFile: output-annotations.txt

  compile_all_maps:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    name: Compile Maps
    runs-on: ubuntu-24.04
    concurrency:
      group: compile_all_maps-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-${{ secrets.CACHE_PURGE_KEY }}
      - name: Debug BYOND download URL
        run: |
          echo "BYOND_MAJOR: $BYOND_MAJOR"
          echo "BYOND_MINOR: $BYOND_MINOR"
          echo "Using local BYOND zip: tools/ci/byond_working.zip"
      - name: Provide BYOND zip
        run: |
          cp tools/ci/byond_working.zip byond.zip
      - name: Compile All Maps
        run: |
          bash tools/ci/install_byond.sh
          # Debug BYOND zip download
          echo "Listing byond.zip:"
          ls -lh byond.zip || true
          echo "Checking byond.zip size:"
          stat byond.zip || true
          echo "Checking byond.zip checksum:"
          sha256sum byond.zip || true
          # Fail if file is missing or too small
          if [ ! -f byond.zip ]; then
            echo "byond.zip not found! Download failed."
            exit 1
          fi
          if [ $(stat -c%s "byond.zip") -lt 10000 ]; then
            echo "byond.zip is too small, likely a failed download."
            exit 1
          fi
          unzip -l byond.zip || { echo "byond.zip is not a valid zip file!"; exit 1; }
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build --ci dm -DCIBUILDING -DCITESTING -DALL_MAPS

  run_all_tests:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    name: Integration Tests (exit after game loads)
    runs-on: ubuntu-24.04
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    concurrency:
      group: run_all_tests-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond-${{ secrets.CACHE_PURGE_KEY }}
      - name: Setup database
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci;' || true
          mysql -u root -proot tg_ci < schema.sql || true
      - name: Install rust-g
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install -y zlib1g-dev:i386 || true
          bash tools/ci/install_rust_g.sh
      - name: Provide BYOND zip
        run: |
          cp tools/ci/byond_working.zip byond.zip
      - name: Compile Tests
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          tools/build/build --ci dm -DCIBUILDING -DANSICOLORS
      - name: Start server and exit after game loads
        run: |
          # Start the server in background
          source $HOME/BYOND/byond/bin/byondsetup || true
          bash tools/ci/run_server.sh &>/tmp/run_server.out &
          SERVER_PID=$!
          echo "Started server with PID $SERVER_PID"
          # Look for load indicators in recent logs or running processes/ports
          detect_loaded() {
            # check common keywords in server output file
            if grep -i -m1 -E "game (has )?loaded|server started|started listening|round started|map loaded|initiali[sz]ation(s)? (complete|finished)|initializations complete" /tmp/run_server.out >/dev/null 2>&1; then
              return 0
            fi
            # check data logs
            if ls data/logs/*.log >/dev/null 2>&1; then
              if grep -i -m1 -E "game (has )?loaded|server started|started listening|round started|map loaded|initiali[sz]ation(s)? (complete|finished)|initializations complete" data/logs/*.log >/dev/null 2>&1; then
                return 0
              fi
            fi
            # check for a likely DreamDaemon/DM process
            if pgrep -f -l "Dream.daemon|dreamdaemon|dm(-server)?|byond" >/dev/null 2>&1; then
              return 0
            fi
            # check for listening BYOND ports (common examples)
            if ss -ltnp 2>/dev/null | grep -E ":5119|:5136|:27888|:27015" >/dev/null 2>&1; then
              return 0
            fi
            return 1
          }
          # wait up to TIMEOUT seconds
          TIMEOUT=120
          for i in $(seq 1 $TIMEOUT); do
            if detect_loaded; then
              echo "Initializations complete within $i seconds"
              # stop server cleanly if possible
              kill $SERVER_PID >/dev/null 2>&1 || true
              wait $SERVER_PID 2>/dev/null || true
              exit 0
            fi
            sleep 1
          done
          echo "Timeout: game did not indicate it was loaded within ${TIMEOUT}s"
          # dump recent server output for debugging
          echo "=== /tmp/run_server.out (last 200 lines) ==="
          tail -n 200 /tmp/run_server.out || true
          kill $SERVER_PID >/dev/null 2>&1 || true
          wait $SERVER_PID 2>/dev/null || true
          exit 1
      - name: Upload screenshot tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_artifacts
          path: data/screenshots_new/
          retention-days: 1

  compare_screenshots:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    needs: [run_all_tests]
    name: Compare Screenshot Tests
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup directory
        run: mkdir -p artifacts
      - name: Download screenshot tests
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: ls -R
        run: ls -R artifacts
      - name: Setup screenshot comparison
        run: npm i
        working-directory: tools/screenshot-test-comparison
      - name: Run screenshot comparison
        run: node tools/screenshot-test-comparison/index.js artifacts code/modules/unit_tests/screenshots artifacts/screenshot_comparisons
      - name: Save PR ID
        if: failure() && github.event.pull_request
        run: |
          echo ${{ github.event.pull_request.number }} > artifacts/screenshot_comparisons/pull_request_number.txt
      - name: Upload bad screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: bad-screenshots
          path: artifacts/screenshot_comparisons

  test_windows:
    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    name: Windows Build
    runs-on: windows-latest
    concurrency:
      group: test_windows-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: tgui/.yarn/cache
          key: ${{ runner.os }}-yarn-${{ secrets.CACHE_PURGE_KEY }}-${{ hashFiles('tgui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ secrets.CACHE_PURGE_KEY }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Compile
        run: pwsh tools/ci/build.ps1
        env:
          DM_EXE: "C:\\byond\\bin\\dm.exe"
      - name: Create artifact
        run: |
          md deploy
          bash tools/deploy.sh ./deploy
      - name: Deploy artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: deploy
