name: Copilot Generate Changelog

on:
  workflow_dispatch:
    inputs:
      base_ref:
        description: "Base ref to compare against (e.g., upstream/master)"
        required: false
        default: "upstream/master"
      since_ref:
        description: "Optional since ref (e.g., last release tag)"
        required: false
        default: ""

jobs:
  generate:
    name: Generate and Summarize Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write
      models: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Add remotes and fetch
        run: |
          git remote add origin1 https://github.com/epic-new-soj-thing/Sojourn-Iskhod.git || true
          git remote add upstream1 https://github.com/sojourn-13/sojourn-station.git || true
          git fetch --all --prune

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyyaml

      - name: Generate per-file changelog diffs
        run: |
          mkdir -p .changelog_diffs
          python3 tools/generate_changelog.py --left origin1/master --right upstream1/master --per-file-out .changelog_diffs --print-diffs
          mkdir -p html/changelogs
          echo "Generated per-file changelog diffs."

      - name: Summarize all changelog diffs with Copilot
        id: copilot_summary
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const TS = Date.now();
            const summaryFile = `html/changelogs/copilot_${TS}.yml`;
            let mergedYaml = "author: Copilot\nchanges:\n";
            const files = fs.readdirSync('.changelog_diffs').filter(f => f.endsWith('.txt'));
            for (const file of files) {
              const content = fs.readFileSync(path.join('.changelog_diffs', file), 'utf8').slice(0, 380000);
              const prompt = `From this changelog diff text, produce a concise player-facing YAML changelog. Input: ${content}. Output YAML only with structure: author: Copilot changes: - <prefix>: <player-facing description>`;
              const resp = await fetch('https://models.inference.ai.azure.com/chat/completions', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                  'Content-Type': 'application/json',
                  'x-ms-model-inference-endpoint': 'gpt-4o-mini',
                },
                body: JSON.stringify({
                  model: 'gpt-4o-mini',
                  messages: [
                    { role: 'system', content: 'You are a meticulous SS13 changelog generator.' },
                    { role: 'user', content: prompt },
                  ],
                  temperature: 0.2,
                  max_tokens: 2000
                }),
              });
              if (!resp.ok) {
                const text = await resp.text();
                core.setFailed(`Model call failed: ${resp.status} ${text}`);
                return;
              }
              const data = await resp.json();
              let yamlOut = (data.choices?.[0]?.message?.content || '').trim();
              yamlOut = yamlOut.split('\n').slice(1).join('\n'); // remove repeated 'author: Copilot'
              mergedYaml += yamlOut + "\n";
            }
            fs.writeFileSync(summaryFile, mergedYaml, 'utf8');
            console.log(`âœ… Wrote merged summarized changelog to ${summaryFile}`);
            core.setOutput('yaml_path', summaryFile);
      
      - name: Commit and push summarized changelog
        env:
          GIT_AUTHOR_NAME: "Nestor Jr."
          GIT_AUTHOR_EMAIL: "action@github.com"
          GIT_COMMITTER_NAME: "Nestor Jr."
          GIT_COMMITTER_EMAIL: "action@github.com"
        run: |
          git config user.name "$GIT_AUTHOR_NAME"
          git config user.email "$GIT_AUTHOR_EMAIL"
          if [ -n "$(git status --porcelain html/changelogs)" ]; then
            git add html/changelogs
            git commit -m "chore(changelog): auto-generated Copilot changelog"
            git push
          else
            echo "No changelog updates to commit."
          fi
